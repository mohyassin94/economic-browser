
import streamlit as st
import sqlite3
import pandas as pd
from io import BytesIO

# Predefined highlighted names
highlighted_level1 = [
    "ุงูุชุฌุงุฑุฉ", "ุงูููุงููุงุช", "ุงูุตูุงุนุฉ ูุงูุชุนุฏูู ูุงูุชุฏููุฑ", "ุงูุฃูู ูุงูุณูุงูุฉ",
    "ุงูููู ูุงูุจุฑูุฏ ูุงูุชุฎุฒูู", "ุงูููู ุงูุงุณุชุดุงุฑูุฉ",
    "ุงูุณูุงุญุฉ ูุงููุทุงุนู ูุงูููุงุฏู ูุชูุธูู ุงููุนุงุฑุถ", "ุงูุฎุฏูุงุช ุงูุฃุฎุฑู"
]

highlighted_level2 = [
    "ุชุฌุงุฑุฉ ุงูููุงุจุณ ูุงูุงููุดุฉ ูุงูุนุทูุฑ ูุงูุณุงุนุงุช ูุฃุฏูุงุช ุงูุชุฌููู ูุงููุธุงุฑุงุช",
    "ุชุฌุงุฑุฉ ุงูููุงููุงุช",
    "ุชุฌุงุฑุฉ ุงูุงุซุงุซ ุงูููุฒูู ูุงูููุฑูุดุงุช ูุงูุณุชุงุฆุฑ ูุงูุณุฌุงุฏ",
    "ุชุฌุงุฑุฉ ุงูุฃูุงูู ูุงูุฃุฏูุงุช ุงูููุฒููุฉ",
    "ุชุฌุงุฑุฉ ุงูุฃุฏูุงุช ูุงูุขูุงุช ูุงูุงุฌูุฒุฉ",
    "ุชุฌุงุฑุฉ ููุงุฏ ุงูุจูุงุก ูุงูุงุฏูุงุช ุงูููุฑุจุงุฆูุฉ ูุงูุตุญูุฉ",
    "ุชุฌุงุฑุฉ ุงูููุงุฏ ุงููููุงููุฉ",
    "ููุงููุงุช ุงูุงูุดุงุกุงุช ุงูุนุงูุฉ",
    "ููุงููุงุช ุนุงูุฉ ูููุจุงูู (ุงูุงูุดุงุกุ ุงูุฅุตูุงุญุ ุงููุฏูุ ุงูุชุฑููู)",
    "ููุงููุงุช ูุฑุนูุฉ ุชุฎุตุตูุฉ (ุงูุญูุฑุ ุงูุฎุฑุณุงูุฉ ุงูุฌุงูุฒุฉุ ุงุนูุงู ุงูููุงุณุฉ...)",
    "ุงูุชุดุบูู ูุงูุตูุงูุฉ ูุงููุธุงูุฉ ููููุดุขุช",
    "ุตููุน ุงูููุณูุฌุงุช", "ุตููุน ุงูููุจูุณุงุช", "ุตููุน ุงูููุชุฌุงุช ุงูุฌูุฏูุฉ ูุงูููุชุฌุงุช ุฐุงุช ุงูุตูุฉ",
    "ุตููุน ููุชุฌุงุช ุงููุนุงุฏู ุงููุดูููุฉ ุ ุจุงุณุชุซูุงุก ุงูุขูุงุช ูุงููุนุฏุงุช", "ุตููุน ุงูุฃุซุงุซ",
    "ุฃูุดุทุฉ ุงูุงูู ูุงูุณูุงูุฉ", "ุงูุดุทุฉ ุงูููู ูุงูุชุฎุฒูู", "ุงูุดุทุฉ ุงูุงุณุชุดุงุฑุงุช ุงูุงุฏุงุฑูุฉ",
    "ุฃูุดุทุฉ ุงููุนุงุฑุถ ูุงููุคุชูุฑุงุช", "ุฎุฏูุงุช ุชูุฌูุฏ ุงูุฃุซุงุซ", "ุงูุฎุฏูุงุช ุงูุชุฌุงุฑูุฉ"
]

highlighted_level3_keywords = [
    "ุงูุจูุน ุจุงูุฌููุฉ", "ุงูุจูุน ุจุงูุชุฌุฒุฆุฉ", "ูููุงุก ุงูุจูุน", "ุชุฑููุจ", "ุตูุงูุฉ", "ุฃูุธูุฉ", "ุตูุงุนุฉ", "ุชูุธูู", "ุฅุตูุงุญ", "ุชุณุฌูู", "ุชูุฌูุฏ"
]

# Connect to DB
conn = sqlite3.connect("industry_activities_v2.db")

st.title("โญ ุงูุฃูุดุทุฉ ุงููุญุฏุฏุฉ ูุงููููุฒุฉ")

def export_button(dataframe, filename):
    if not dataframe.empty:
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            dataframe.to_excel(writer, index=False)
        st.download_button(
            label="โฌ๏ธ ุชุญููู ุงููุชุงุฆุฌ ูู Excel",
            data=output.getvalue(),
            file_name=filename,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Load Level 1
level1_df = pd.read_sql_query("SELECT level1_id, name_ar FROM Level1", conn)
level1_df["display"] = level1_df["name_ar"].apply(
    lambda name: f"โญ {name}" if name in highlighted_level1 else name
)
level1_dict = level1_df.set_index("display")["level1_id"].to_dict()

# Prioritize highlighted Level 1 options
highlighted_l1_df = level1_df[level1_df["name_ar"].isin(highlighted_level1)]
non_highlighted_l1_df = level1_df[~level1_df["name_ar"].isin(highlighted_level1)]
sorted_level1_df = pd.concat([highlighted_l1_df, non_highlighted_l1_df])
level1_dict = sorted_level1_df.set_index("display")["level1_id"].to_dict()

selected_l1 = st.selectbox("๐ ุงุฎุชุฑ ูุทุงุนูุง ุฑุฆูุณููุง", list(level1_dict.keys()))

level1_id = level1_dict[selected_l1]

# Load Level 2
level2_df = pd.read_sql_query("SELECT level2_id, name_ar FROM Level2 WHERE level1_id = ?", conn, params=[level1_id])
level2_df["display"] = level2_df["name_ar"].apply(
    lambda name: f"โญ {name}" if name in highlighted_level2 else name
)

highlighted_df = level2_df[level2_df["name_ar"].isin(highlighted_level2)]
non_highlighted_df = level2_df[~level2_df["name_ar"].isin(highlighted_level2)]
sorted_level2_df = pd.concat([highlighted_df, non_highlighted_df])
level2_dict = sorted_level2_df.set_index("display")["level2_id"].to_dict()

selected_l2 = st.selectbox("๐ ุงุฎุชุฑ ูุทุงุนูุง ูุฑุนููุง", list(level2_dict.keys()))
level2_id = level2_dict[selected_l2]

# Load Level 3
level3_df = pd.read_sql_query("SELECT level3_id AS 'ุฑูู ุงููุดุงุท', name_ar AS 'ุงููุดุงุท ุงูุชูุตููู' FROM Level3 WHERE level2_id = ?", conn, params=[level2_id])

def highlight_level3(row):
    for word in highlighted_level3_keywords:
        if word in row["ุงููุดุงุท ุงูุชูุตููู"]:
            return f"โญ {row['ุงููุดุงุท ุงูุชูุตููู']}"
    return row["ุงููุดุงุท ุงูุชูุตููู"]

level3_df["ุงููุดุงุท ุงูุชูุตููู"] = level3_df.apply(highlight_level3, axis=1)


st.subheader("๐ ุงูุฃูุดุทุฉ ุงูุชูุตูููุฉ (Level 3)")
search_term = st.text_input("๐ ุงุจุญุซ ุฏุงุฎู ุงูุฃูุดุทุฉ ุงูุชูุตูููุฉ", "")
if search_term:
    level3_df = level3_df[level3_df['ุงููุดุงุท ุงูุชูุตููู'].str.contains(search_term)]


# Reorder Level 3 to put highlighted items first
highlighted_l3 = level3_df[level3_df['ุงููุดุงุท ุงูุชูุตููู'].str.contains("โญ")]
non_highlighted_l3 = level3_df[~level3_df['ุงููุดุงุท ุงูุชูุตููู'].str.contains("โญ")]
level3_df = pd.concat([highlighted_l3, non_highlighted_l3])

st.dataframe(level3_df.style.applymap(lambda x: "background-color: #fff5b1" if isinstance(x, str) and x.startswith("โญ") else ""))

export_button(level3_df, f"{selected_l2}_activities.xlsx")
